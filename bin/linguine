#!/usr/bin/env sh

print_usage() {
  cat <<USG

Usage: ${1} <action> <domain> [locale]

The cli command to generate/extract/update/compile gettext catalog files.
As generally steps, 1.extract, 2.update, 3.(edit) and 4.compile it.

Options:
  -h, --help   display this help and exit

Arguments:
  <action>   {compile|c},{extract|e},{generate|g},{update|u},{sync|s}
  [domain]   {message,}
  [locale]   en

Actions:
  compile    compile *.po to *.mo for application
  extract    extract msgid(s) into *.pot
  generate   create new *.po file with latest *.pot
  update     update *.po using *.pot (template)
  sync       sync git repo

Examples:
  % linguine e message
  % linguine s
  % linguine g message en
  % linguine u message en
  % linguine c message en
USG
}

# see https://gitlab.com/scrolliris/uttigen
PACKAGE_NAME="Uttigen"
PACKAGE_VERSION="0.1"
REMOTE_NAME="website-translation"
REMOTE_URL="https://gitlab.com/scrolliris/scrolliris-website-translation.git"
REMOTE_BRANCH="master"
SUBTREE_DIR="locale"
MSGID_BUGS_ADDRESS="support@scrolliris.com"
COPYRIGHT="Lupine Software LLC"

KEYWORD="_"
WIDTH=73

ACTION=""
DOMAIN=""
LOCALE=""

getopt --test > /dev/null
if [ $? -ne 4 ]; then
  echo "\`getout --test\` failed"
fi

set -e

options=h
longoptions=help

_=`getopt --name "$0" \
--options "$options" --longoptions "$longoptions" --unquoted -- "$@"`

if [ $? -ne 0 ]; then
  exit 2
fi

while [ $# -gt 0 ]; do
  case $1 in
    -h|--help)
      print_usage `basename $0`
      exit 0
      ;;
    "compile"|"c"|"extract"|"e"|"generate"|"g"|"update"|"u"|"sync"|"s")
      ACTION="${1}"
      shift
      ;;
    "message")
      DOMAIN="${1}"
      shift
      ;;
    "en")
      LOCALE="${1}"
      shift
      ;;
    *)
      echo "Unknown option :'("
      exit 2
      ;;
  esac
done

run_extract_command() {
  FILE_LIST="`find ./thun -type f \( -name '*.py' -or -name '*.mako' \) \
    -print`"
  xgettext --default-domain=${DOMAIN} --sort-output --keyword=$KEYWORD \
    --output-dir=locale --output=${DOMAIN}.pot \
    --from-code=UTF-8 --language=Python --width=$WIDTH \
    --msgid-bugs-address=$MSGID_BUGS_ADDRESS \
    --directory=. \
    --package-name=$PACKAGE_NAME --package-version=$PACKAGE_VERSION \
    $FILE_LIST
}

run_generate_command() {
  mkdir -p locale/${LOCALE}/LC_MESSAGES
  xgettext --default-domain=${DOMAIN} --sort-output --width=$WIDTH \
    --output-dir=locale --output=${LOCALE}/LC_MESSAGES/${DOMAIN}.po \
    --directory=locale \
    ${DOMAIN}.pot
}

run_update_command() {
  msgmerge --directory=locale \
  --output-file=locale/${LOCALE}/LC_MESSAGES/${DOMAIN}.po --previous \
  --sort-output --width=$WIDTH \
  ${LOCALE}/LC_MESSAGES/${DOMAIN}.po ${DOMAIN}.pot
}

run_compile_command() {
  msgfmt --directory=locale/${LOCALE}/LC_MESSAGES ${DOMAIN}.po \
    --output-file=locale/${LOCALE}/LC_MESSAGES/${DOMAIN}.mo \
    --check --strict
}

run_sync_command() {
  git remote get-url $REMOTE_NAME

  if [ "${?}" -ne "0" ]; then
    git remote add $REMOTE_NAME $REMOTE_URL
  fi

  subtree=$( \
    git log | \
    grep git-subtree-dir | \
    tr -d ' ' | \
    cut -d ":" -f2 | \
    sort | \
    uniq |
    grep $SUBTREE_DIR
  )

  if [ "${subtree}" = "" ]; then
    git subtree add --prefix $SUBTREE_DIR $REMOTE_NAME $REMOTE_BRANCH
  fi

  git pull -s subtree -Xsubtree=$SUBTREE_DIR $REMOTE_NAME $REMOTE_BRANCH
}

case $ACTION in
  "c") ACTION="compile"  ;;
  "e") ACTION="extract"  ;;
  "g") ACTION="generate" ;;
  "u") ACTION="update"   ;;
  "s") ACTION="sync"     ;;
esac


if [ "$ACTION" = "" ]; then
  echo "<action> is missing"
  print_usage `basename $0`
  exit 2
fi

if [ "$ACTION" != "sync" ] && [ "$DOMAIN" = "" ]; then
  echo "<domain> is missing"
  print_usage `basename $0`
  exit 2
fi

if [ "$ACTION" != "extract" ] && [ "$ACTION" != "sync" ] && \
   [ "$LOCALE" = "" ]; then
  echo "<locale> is missing"
  print_usage `basename $0`
  exit 2
fi

case $ACTION in
  "compile")  run_compile_command  ;;
  "extract")  run_extract_command  ;;
  "generate") run_generate_command ;;
  "update")   run_update_command   ;;
  "sync")     run_sync_command     ;;
  *)          echo 'unknown action'; exit 1 ;;
esac
