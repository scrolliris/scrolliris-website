#!/usr/bin/env python

"""This script runs doctest in target files using multiprocessing package.

The `run_test()` works almost same with `doctest.testfile('path/to/file.py')`
for a single test. But in some cases, it seems that `testfile()` needs
additional blank line(s) in the end of doctest (because parsing), so it runs
`python -m doctest file.py`. If you need to run doctest for a single file,
just run it command like this script.
"""

from __future__ import print_function
import multiprocessing as mp
from os import path
import sys

# a generator makes files which contain doctest(s)
# TODO: collect files, automatically
TARGET_FILES = (path.abspath(path.join(path.dirname(__file__), f)) for f in (
    '../tirol/util.py',
))


def run_test(test_queue, return_value):
    # type: (mp.JoinableQueue, mp.Value) -> None
    """Doctest runner process.

    This process skips all tests after a failure.
    """
    from collections import namedtuple
    from subprocess import PIPE, Popen

    # simulate result of `doctest.testfile()`
    Result = namedtuple('Result', 'failed')  # pylint:  disable=invalid-name

    def _run_test(filepath):  # type: (str) -> Tuple[tuple, int]
        # result = doctest.testfile(filepath)
        p = Popen(['python', '-m', 'doctest', filepath],
                  stdin=None, stdout=PIPE, stderr=PIPE)
        return (p.communicate(), p.returncode)

    while True:
        filepath = test_queue.get()
        if return_value.value != 0:  # skipped
            print("Skipping test in file '{}'...".format(filepath))
            test_queue.task_done()
        try:
            (out, err), returncode = _run_test(filepath)
            if err:
                raise RuntimeError('Error: "%s"' % err.decode('utf-8'))
            if returncode != 0:
                result = Result(returncode)
                print(out.decode('utf-8'))
            else:
                result = Result(0)
        except Exception as exp:  # pylint: disable=broad-except
            print(exp)
            result = Result(2)

        return_value.value = result.failed if result.failed != 0 else 0
        test_queue.task_done()


def runner(files, test_queue):
    # type: (Generator[str], mp.JoinableQueue) -> None
    for filepath in files:
        print("Run doctest in '{}'...".format(filepath))
        test_queue.put(filepath)


def main(files):  # type: (Generator[str]) -> None
    test_queue = mp.JoinableQueue()

    return_value = mp.Value('i', 0)
    test_proc = mp.Process(target=run_test, args=(test_queue, return_value,))
    test_proc.daemon = True
    test_proc.start()

    runner(files, test_queue)

    test_queue.join()

    status = int(return_value.value)
    print("\nExited with status '{}'".format(status))
    return sys.exit(status)


if __name__ == '__main__':
    main(TARGET_FILES)

# vim:syntax=python
